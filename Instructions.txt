INSTRUCTIONS TO RUN
===================

Sign on to PC
-------------
- Log on to plus1 and then on to a pc. You need the '-X' to do plotting.
    $ ssh -X username@plus1.hep.ucl.ac.uk
    $ ssh -X pcXXX
    
Check Out Repository
--------------------
- Check out the branch code from repository.
    $ hg clone https://bitbucket.org/heprivet/contur/ -b harry-dev
or
    $ git clone https://github.com/hsaunders1904/MScContur
    
Set Up Environment
------------------
- Set up environments; mostly adding relevant folders to the system path such
  that you can execute the contur commands from anywhere.
    $ source contur/setupContur.sh

- You need to do this every time you login.

- You also need to make sure the 'herwigSetup.sh' file contains the path to the
  Herwig setup script (on the UCL cluster this should be
  /unix/cedar/software/sl6/Herwig-Tip/setupEnv.sh), then source this.
    $ source herwigSetup.sh

Build Analyses Databases
------------------------
- Build modified analyses
    $ cd contur/modified_analyses/Analyses/
    $ chmod +x buildrivet.sh
        --> give 'buildrivet.sh' executable permission.
    $ ./buildrivet.sh
    
- Build database of static analysis information
    $ cd contur
        --> Top level of repository
    $ make
        --> If make step does not work you may need to install sqlite3 and 
            re-run make.
        --> If you run contur before doing this step an empty database file
            will be created
            (contur/AnalysisTools/contur/contur/TestingFunctions/analyses.db)
            You will need to delete this and then run this step.

- You need only do this once.

Create Run Area
---------------     
- Copy the run area from the repository and copy over to a separate folder.
  This is where you will run everything from now on.
    $ cd ~
    $ cp -r contur/AnalysisTools/GridSetup/ run-area/

Choose a Model
-------------- 
- Choose a model. The standard run area contains two simplified dark matter
  models installed as default.
    > DM_vector_mediator_UFO is the model used in the first contur paper.
    > DM_vector_mediator_HF_UFO is the same model but with Z' coupling to all
      generations of quark.
  
  The following instructions are specific to running Herwig with one of these 
  models, a recommended first step. If you are running a different model or 
  generator, you'll have to modify your actions here; for a single run, once 
  you have the yoda file from rivet, the procedure should be the same again.

  For convenience, we have two ways of running, specific to the simple DM model
  but can be modified.
  Example Herwig .in files are provided in the model directories; see the 
  comments in there.
    > First Way: (see for example .in files with HAD in the name) runs 
      inclusive generation of BSM particles.
    > Second Way: (see for example .in files with WEAK in the name) forces 
      associated production modes of weak bosons, and leptonic decays of those 
      bosons.

- Build the UFO model using Herwig's 'ufo2herwig' command.
    $ cd run-area/GridPack/
    $ ufo2herwig DM_vector_mediator_HF_UFO/
    $ make
    
Run a Single Single Set of Analyses
-----------------------------------

- Copy one of the .in files from inside the model to the top level of the
  grid pack.
    $ cp DM_vector_mediator_HF_UFO/hf-1000-600-7_HAD.in TestRun.in

- Build the Herwig run card (LHC.run).
    $ Herwig read TestRun.in

- Run the Herwig run card, specifying the number of events to generate. This 
  can take a while so, as a first test, running around 200 events is fine.
    $ Herwig run LHC.run -N 200
    
- This will produce the file LHC.yoda containing the results of the Herwig run.
  Analyse this with contur. You can also specify which statistical test to use
  with the -t flag, e.g. '-t CS' for chi-squared test. (Run 'contur --help' to
  see more options).
    $ contur LHC.yoda -t CS
    
- The contur script will output a plots folder and an ANALYSIS folder and 
  print the resulting exclusion confidence level.
  
- To generate 'contur-plots' directory containing histograms and an index.html
  file to view them all. Whilst still in the GridPack directory, run:
    $ contur-mkhtml LHC.yoda
    
Run a Batch Job to Generate Heatmaps
------------------------------------

- Go to base directory of copied over run area.
    $ cd run-area/
    
- Define a parameter space in 'param_file.dat'. This should be a space 
  seperated file formatted as:
    [parameter] [minimum value] [maximum value]
  
  You should check that the parameters defined are also defined at the top of 
  the LHC.in file within the same directory.
  
  The example model has parameters 'Xm', 'Y1', 'gYq', 'gYXm' defined in 
  'params_file.dat' and the LHC.in file has, at the top of the file:
      read FRModel.model
      set /Herwig/FRModel/Particles/Y1:NominalMass {Y1}
      set /Herwig/FRModel/Particles/Xm:NominalMass {Xm}
      set /Herwig/FRModel/FRModel:gYq {gYq}

  If you wanted to add or remove parameters you must do this in both files.

- You can check that your model is built correctly and necessary files are
  present to by executing 'pytest' in the run-area directory.
    $ pytest
  
- Run a scan over the parameter space defined in 'param_file.dat' and submit it
  to the batch farm. There are currently two sampling modes, uniform and
  random. Have a look at the command line options before running.
     $ batch-submit --help
     $ batch-submit 27 -N 1000 --seed 101
     
- This will produce a directory called 'myscan00' containing 27 runpoint
  directories and file 'sampled_points.txt' that specifies the parameter 
  values used at each run point.
  
- Within each run point directory there will be a 'runpoint_xxxx.sh' script.
  This is what has been submitted to the batch farm. You need to wait for the
  farm to finish the job before continuing. You can check the progress using
  the 'qstat' command.
  
- When the batch job is complete there should, in every run point directory, be 
  files 'LHC-runpoint_xxx-1.yoda' and 'LHC-runpoint_xxxx-2.yoda'.
  
- Analyse results with contur. Resulting .map file will be outputted to new
  ANALYSIS folder.
    $ contur -g myscan00

- Plot a heatmap.
    $ cd ANALYSIS/
    $ contur-plot --help
    $ contur-plot myscan00.map Xm Y1 gYq -s 100 -t "My First Heatmap"


Re-scanning
-----------

- To scan new points based on a previous scan's results use batch submit again
  but specify the previous run's .map file.
    $ batch-submit 20 -r ANALYSIS/myscan00.map

- This will generate directory 'myscan01'; when the batch is complete you can
  run Contur's analysis on this directory
    $ contur -g myscan01/

- This will ouptut 'myscan01.map' inside the ANALYSIS directory. You can then
  merge the two map files and plot the joint results.
    $ cd ANALYSIS/
    $ merge-map myscan00.map myscan01.map -o merged.map
    $ contur-plot Xm Y1 gYq -s 100 -t "My First Merged Heatmap"


Running Tests
-------------

- You can run tests on some of Contur's code using pytest.
    $ cd contur/AnalysisTools/contur/
    $ pytest

- Currently this runs tests on the code responsible for the batch submitting
  process.
