#!/usr/bin/env python

import CL
import os
from optparse import OptionParser

## this does appear to work
parser = OptionParser(usage = __doc__)
parser.add_option("-o", "--outputdir", dest = "OUTPUTDIR",
  default = "plots", help = "Specify output directory for output plots.")

## this doesn't work - getting over written somewhere
parser.add_option("-a", "--analysisdir", dest = "ANALYSISDIR",
  default = "ANALYSIS", help = "Output directory for analysis cards.")

# Command line parsing
opts, _ = parser.parse_args()

# This initialise the dict that we will add tovfor each cell in the grid
masterDict = CL.init_dict()

# this loops through each.yoda file and calls the analysis function from CL.py
for root, dirs, files in os.walk('.'):
    for name in files:
        fileliststatic = []
        if '.yoda' in name and 'LHC' not in name and 'plot' not in name:
            yodafile = os.path.join(root, name)
            fileliststatic = str(yodafile)

            try:
                # TODO use regex instead
                splitname = name.strip('.yoda').split('_')
                x = splitname[1]
                y = splitname[3]
                _, _ = int(x), int(y) # check we have integers
            except (IndexError, ValueError):
                print 'Yoda file does not appear to have the correct naming style', name
                continue

            print "Found valid yoda file", yodafile.strip('./')
            print "Model point info ", x, y

            # Perform analysis
            mapPoints = CL.contur_analysis(yodafile, opts, True, x, y)
            masterDict = CL.grid_add_to_dict(masterDict, mapPoints)

        else:
            continue

# Write out the grid results
CL.output_grid(masterDict, opts)

print "Run finished, analysis output to ", opts.ANALYSISDIR, " folder"
