#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
TODO:
- Fix 'gen_gif' to read all '*.png's in directory and produce .gif
"""

import os
import sys
import matplotlib.pyplot as plt
from argparse import ArgumentParser, RawTextHelpFormatter, ArgumentError

from contur.contur_grid import ConturGrid


# def generate_gif():
#     create_palette = ("ffmpeg -y -f image2 -i plots/%04d.png -vf scale=900"
#                       ":-1:sws_dither=ed,palettegen plots/palette.png")
#     create_gif = ("ffmpeg -y -f image2 -framerate 9 -i plots/%04d.png -i "
#                   "plots/palette.png -lavfi paletteuse plots/heatmap.mp4")
#     gif_command = ' && '.join([create_palette, create_gif])
#     os.system(gif_command)

parser_description = (
    "Plot contur data from a .map file.\n"
    "You should specify a .map file to read and 2 or 3 variable to plot\n"
    "\n"
    "Usage examples:\n"
    "---------------\n"
    "contur-plot myscan.map Xm Y1\n"
    "    --> to plot heat map with Xm on x-axis and Y1 on y-axis\n"
    "\n"
    "contur-plot myscan.map Xm Y1 gYq -s 50\n"
    "    --> to plot Xm on x-axis Y1 on y-axis and slice 50 of gYq (z-axis)\n"
    "\n"   
    "contur-plot myscan.map Xm Y1 gYq -sc\n"
    "    --> to plot 3d scatter graph\n"
    "\n"
    "contur-plot myscan.map Xm Y1 gYq -a\n"
    "    --> to plot Xm on x-axis, Y1 on y-axis and all slices of gYq\n")

parser = ArgumentParser(description=parser_description,
                        formatter_class=RawTextHelpFormatter)
# Positional arguments
parser.add_argument('map_file', type=str, help=('Path to .map file '
                    'containing conturDepot objects.'))
parser.add_argument('variables', nargs='*', type=str,
                    help=('x, y [and z] variables to plot.'))
# Optional arguments
parser.add_argument('-g', '--grid_size', type=int, default=200,
                    help='Number of points per dimension in grid.\n'
                         '(default=%(default)s)')
parser.add_argument('-a', '--all', action='store_true',
                    help=('Plot heatmap for all slices in z-dimension.'))
parser.add_argument('-s', '--slice', type=int,
                    help=('Index of slice of parameter space to plot.\n'
                          'This or -a must be specified if plotting a heatmap'
                          '\nin more than 2 dimensions.'))
parser.add_argument('-sc', '--scatter', action='store_true',
                    help='Plot a 3D scatter graph.')
parser.add_argument('-o', '--output_path', type=str, default='heatmap.png',
                    help=("Path to output plot(s) to. Should be a filename\n"
                          "unless using '--all' flag, in which case this\n"
                          "should point to a directory."))
parser.add_argument('-x', '--x_label', type=str, default=None,
                    help='x-axis label.')
parser.add_argument('-y', '--y_label', type=str, default=None,
                    help='y-axis label.')
parser.add_argument('-z', '--z_label', type=str, default=None,
                    help='z-axis label.')
parser.add_argument('-t', '--title', type=str, help='Title for plot.')
parser.add_argument('-p', '--points', action='store_true',
                    help='Plot positions of data points over heatmap.')
parser.add_argument('-ds', '--dont_save', action='store_true',
                    help="Don't save plot (can be useful in development).")
args = parser.parse_args()

parsing_error_msg = ("To call contur-plot-prof you must specify an input .map " 
                     "file and 2 or 3 variables to plot!\nThe format must "
                     "follow:\ncontur-plot-prof .map_file x_variable "
                     "y_variable [z_variable] [optional_arguments]")

# Error catching
if len(args.variables) not in [2, 3]:
    print("Error parsing arguments!\n\n" + parsing_error_msg)
    sys.exit()

if len(args.variables) == 3 and not (args.slice or args.scatter or args.all):
    print("Error:\n-----\nYou must specify a slice index or whether to plot a "
          "scatter graph if you are plotting in 3 dimensions.")
    sys.exit()

if args.slice >= args.grid_size:
    print("Error slicing grid!\n"
          "Specified slice outside of grid dimensions. The slice index must "
          "be less than grid size (default=200).")
    sys.exit()

# Interpolate grid
contur_grid = ConturGrid(args.map_file, args.grid_size, args.variables)

if len(args.variables) == 2:
    if args.scatter:
        # Plot a 2D scatter graph
        if args.output_path == 'heatmap.png':
            out_path = '2d_plot.png'
        else:
            out_path = args.output_path
        print("Generating " + out_path)
        contur_grid.plot_2d_scatter(x_label=args.x_label,
                                    y_label=args.y_label,
                                    title=args.title,
                                    dont_save=args.dont_save,
                                    output_path=out_path)
    else:
        # Plot 2D heatmap
        print("Generating " + args.output_path)
        contur_grid.plot_imshow(slice_idx=None,
                                x_label=args.x_label,
                                y_label=args.y_label,
                                z_label=args.z_label,
                                title=args.title,
                                dont_save=args.dont_save,
                                output_path=args.output_path,
                                plot_points=args.points)

else:
    if args.slice:
        # Plot heat map of slice of 3D parameter space
        print("Generating " + args.output_path)
        contur_grid.plot_imshow(slice_idx=args.slice,
                                x_label=args.x_label,
                                y_label=args.y_label,
                                z_label=args.z_label,
                                title=args.title,
                                dont_save=args.dont_save,
                                output_path=args.output_path,
                                plot_points=args.points)
    elif args.all:
        # Plot a heat map for every slice of 3D parameter space
        if args.output_path == 'heatmap.png':
            args.output_path = 'plots'
        if not os.path.exists(args.output_path):
            os.mkdir(args.output_path)

        print("Generating plots in " + args.output_path)
        for s in range(args.grid_size):
            plt.ioff()
            out_path = os.path.join(args.output_path, '%04i.png' % s)
            contur_grid.plot_imshow(slice_idx=s,
                                    x_label=args.x_label,
                                    y_label=args.y_label,
                                    z_label=args.z_label,
                                    title=args.title,
                                    dont_save=args.dont_save,
                                    output_path=out_path,
                                    plot_points=args.points)
            plt.close()

    elif args.scatter:
        # Plot 3D scatter graph
        if args.output_path == 'heatmap.png':
            out_path = '3d_plot.png'
        else:
            out_path = args.output_path

        print("Generating " + out_path)
        contur_grid.plot_3d_scatter(x_label=args.x_label,
                                    y_label=args.y_label,
                                    z_label=args.z_label,
                                    title=args.title,
                                    dont_save=args.dont_save,
                                    output_path=out_path)
