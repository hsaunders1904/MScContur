#!/usr/bin/env python

import contur as ct
# this is just used to check if a histo is a valid contur histo, this should be factored into histFact and taken out
from contur import TestingFunctions as tf



from optparse import OptionParser
import contur.Utils as util
import sys, os, pickle

# TODO Fix the options so they work! Add option for grid mode etc.
parser = OptionParser(usage=__doc__)
parser.add_option("-o", "--outputdir", dest="OUTPUTDIR",
                  default="plots", help="Specify output directory for output plots.")
parser.add_option("-a", "--analysisdir", dest="ANALYSISDIR",
                  default="ANALYSIS", help="Output directory for analysis cards.")
parser.add_option("-s", "--single",
                  action="store_false", dest="BATCHMODE", default=True,
                  help="single run - more output")
parser.add_option("-n", "--nostack",
                  action="store_true", dest="NOSTACK", default=False,
                  help="in single run mode, do not stack the histograms in dat file output")
parser.add_option("-t", "--testmethod", dest="TESTMETHOD",
                  default="LL", help="Statistical test to apply. LL=log likelihood/poisson, LLA=log liklihood/poison asimov, CS=chi2 \n (All previous assume background=data, background error=0), CSD=as CS but assuming background error=data error CST=chi2 using theory where available CSDT=chi2 using theory where available, otherwise background and error taken from measurement.")
parser.add_option("-v", "--version", 
                  action="store_true", dest="printVersion", 
                  default=False, help="print version number and exit.")
#parser.add_option("-g", "--grid", dest="GRID",default=False,
#                  help="specify a folder containing a structured grid of points to analyize")
parser.add_option("-g", "--grid", action="store_true", dest="GRID",
                  help="Set this flag to read grids of structured yoda files rather than individual files")

# Command line parsing
opts, yodafiles = parser.parse_args()

version = " Beta pre-release"

if opts.printVersion:
    util.writeBanner()
    sys.exit(0)

if not yodafiles:
    sys.stderr.write("Error: You need to specify some YODA files to be analysed!\n")
    sys.exit(1)

def write_output(message, conturFactory):
    """Temporary function to mimic output of 1 single analysis"""
    util.mkoutdir(opts.ANALYSISDIR)
    sumfn = open(opts.ANALYSISDIR + "/Summary.txt", 'w')
    result = "Combined CLs naive exclusion for these plots is %.1f %% \n" % (conturFactory.conturPoint.CLs *100.0)
    if opts.TESTMETHOD != 'LL' and opts.TESTMETHOD != 'LLA': 
        result += "Probability of SM only giving this agreement or worse assuming    SM = %.4f \n" % (conturFactory.conturPoint.p_b) 
        result += "Probability of SM+BSM giving this agreement or worse assuming SM+BSM = %.4f \n" % (conturFactory.conturPoint.p_sb) 
        if conturFactory.conturPoint.p_b+conturFactory.conturPoint.p_sb > 0:
            result += "Compared to the SM, this model is disfavoured at %.2f %% cl \n" % (100.0*conturFactory.conturPoint.p_b/(conturFactory.conturPoint.p_b+conturFactory.conturPoint.p_sb))

    sumfn.write(message+"\n"+result+"\n")
    sumfn.write("pools")
    for x in conturFactory.sortedPoints:
        sumfn.write("\n" + x.pools)
        sumfn.write("\n" + x.__repr__())
        sumfn.write("\n" + x.tags)
    print result
    sumfn.close()
    for x in conturFactory.sortedPoints:
#   does anyone care about these dat files anymore, especially if we have the pickle dump? 
        util.writeOutput(x.__repr__(), x.pools + ".dat")
        with open(opts.ANALYSISDIR + "/" + x.pools + '.map', 'w') as f:
            pickle.dump(x, f)
    with open(opts.ANALYSISDIR + "/combined.map", 'w') as f:
        pickle.dump(conturFactory.conturPoint, f)

def write_output_grid(gridPoints,group=''):
    util.mkoutdir(opts.ANALYSISDIR)
    with open(opts.ANALYSISDIR + "/" + group + '.map', 'w') as f:
            pickle.dump(gridPoints, f)
    print "Writing output map for " + group + " to folder: " + opts.ANALYSISDIR


def analyiseYODA(yodafile):
    #For now we strap the basic functionality of analysing a YODA file into a single common function
    #This will be internalised in conturFactory eventually

    contur = ct.conturDepot(opts.TESTMETHOD)

    if not opts.BATCHMODE:
        # this is to get the plotting attributes down the line
        plotdirs = [os.path.abspath(os.path.dirname(f)) for f in infile]
        plotparser = util.mkStdPlotParser(plotdirs, )


    refhistos, mchistos, xsec, Nev = util.getHistos(yodafile)
    print "Monte Carlo Luminosity generated is %.1f inverse pb" % (float(Nev.numEntries()) / xsec.point(0).x)

    # again this looping belongs inside conturDepot

    for k, v in mchistos.iteritems():
        for k2, v2 in v.iteritems():

            # this is just used to check if a histo is a valid contur histo, this should be factored into histFact and taken out as a check here

            if tf.validHisto(v2.path):

                # if "CMS_2013_I1224539_WJET" not in v2.path:
                # if "ATLAS_2017_I1609448" not in v2.path:
                #   continue
                # Currently histfact looks up the ref data every time, this should be factored into conturfact
                # Conturfact should also hold xsec and Nev eventually

                histo = ct.histFactory(v2, xsec, Nev, opts.TESTMETHOD)

                # sometimes the list of conturPoints made by hist fact is empty (no signal in any bin), this exception should be properly handled inside histFact

                # at this point, if we want to see the histogram, we need to write its .dat file.
                if not opts.BATCHMODE:
                    histo.doPlot()
                    util.writeHistoDat(infile, plotparser, opts.OUTPUTDIR, opts.NOSTACK, histo)

                if histo.conturPoints:
                    # add the representative (i.e. highest cl bin from each histo) and push it into the factory
                    contur.addPoint(histo.conturPoints[histo.maxcl])

    # once we have every point from a given yoda, call the function to sort this
    # eventually conturFact should know which model point each yoda is from, then multiple yodas covering different pools can be pushed in at the same time
    # and eventually construct a point for each parameter space point, for now assume a single input yoda to test

    contur.sortPoints()

    #  return the sorted conturpoint
    return contur




if __name__ == "__main__":

    util.writeBanner()

    if opts.TESTMETHOD == 'CS':
        modeMessage = "Using Chi2 test method, theory=data, no theory uncertainty"
    elif opts.TESTMETHOD == 'CSD':
        modeMessage = "Using Chi2 test method, no theory prediction, theory error=data error"
    elif opts.TESTMETHOD == 'CST':
        modeMessage = "Using Chi2 test method, with theory predictions where available, else no theory error"
    elif opts.TESTMETHOD == 'CSDT' or opts.TESTMETHOD == 'CSTD':
        modeMessage = "Using Chi2 test method, theory predictions where available, else theory=data, theory error=data error"
    elif opts.TESTMETHOD == 'LL':
        modeMessage = "Using Log Likelihood (Poisson) test method, theory=data, no theory uncertainty"
    elif opts.TESTMETHOD == 'LLA':
        modeMessage = "Using Log Likelihood (Azimov) test method, theory=data, no theory uncertainty"
    else:
        print "Unknown test method: ", opts.TESTMETHOD
        sys.exit(1)

    print modeMessage

    # Initialise a conturDepot
    #contur = ct.conturDepot(opts.TESTMETHOD)

    if opts.GRID:
        #do a grid based scan
        for dirs in yodafiles:
                    gridPoints=[]
                    for rt,drs,fls in os.walk(os.path.join(dirs)):
                        #print fls
                        for name in fls:
                            fileliststatic = []
                            if '.yoda' in name and 'LHC' not in name and 'plot' not in name:
                                yodafile = os.path.join(rt, name)
                                fileliststatic = str(yodafile)
                                try:
                                    # TODO use regex instead
                                    splitname = name.strip('.yoda').split('_')
                                    x = splitname[1]
                                    y = splitname[3]
                                    _, _ = int(x), int(y)  # check we have integers
                                except (IndexError, ValueError):
                                    print 'Yoda file does not appear to have the correct naming style', name
                                    continue

                                print "Found valid yoda file", yodafile.strip('./')
                                print "Model point info ", x, y

                                # Perform analysis
                                conturDepot = analyiseYODA(yodafile)
                                conturDepot.ModelParam1=x
                                conturDepot.ModelParam2=y
                                gridPoints.append(conturDepot)
 #                               masterDict = CL.grid_add_to_dict(masterDict, mapPoints)
                            else:
                                continue
                    #Write output of grid Point
                    write_output_grid(gridPoints,group=os.path.basename(dirs))

    else:
        # conturFactory should take entire yoda files/ list of yoda file as initialization argument but for now loop over aos in yodafile
        for infile in yodafiles:

            contur=analyiseYODA(infile)
            if not opts.BATCHMODE:
                # write summary for plotting
                write_output(modeMessage, contur)
            else:
                print contur.conturPoint.CLs

