#!/usr/bin/env python

import contur as ct
# this is just used to check if a histo is a valid contur histo, this should be factored into histFact and taken out
from contur import TestingFunctions as tf



from optparse import OptionParser
import contur.Utils as util
import sys, os, pickle

# TODO Fix the options so they work! Add option for grid mode etc.
parser = OptionParser(usage=__doc__)
parser.add_option("-o", "--outputdir", dest="OUTPUTDIR",
                  default="plots", help="Specify output directory for output plots.")
parser.add_option("-a", "--analysisdir", dest="ANALYSISDIR",
                  default="ANALYSIS", help="Output directory for analysis cards.")
parser.add_option("-s", "--single",
                  action="store_false", dest="BATCHMODE", default=True,
                  help="single run - more output")
parser.add_option("-n", "--nostack",
                  action="store_true", dest="NOSTACK", default=False,
                  help="in single run mode, do not stack the histograms in dat file output")


# Command line parsing
opts, yodafiles = parser.parse_args()

if not yodafiles:
    sys.stderr.write("Error: You need to specify some YODA files to be analysed!\n")
    sys.exit(1)

def write_output(conturFactory):
    """Temporary function to mimic output of 1 single analysis"""
    util.mkoutdir(opts.ANALYSISDIR)
    sumfn = open(opts.ANALYSISDIR + "/Summary.txt", 'w')
    result = "Combined CL exclusion for these plots is %.1f %%" % (conturFactory.conturPoint.CLs *100.0)
    sumfn.write(result)
    for x in conturFactory.sortedPoints:
        sumfn.write("\n" + x.pools)
        sumfn.write("\n" + x.__repr__())
        sumfn.write("\n" + x.tags)
    print result
    sumfn.close()
    for x in conturFactory.sortedPoints:
#   does anyone care about these dat files anymore, especially if we have the pickle dump? 
        util.writeOutput(x.__repr__(), x.pools + ".dat")
        with open(opts.ANALYSISDIR + "/" + x.pools + '.map', 'w') as f:
            pickle.dump(x, f)
    with open(opts.ANALYSISDIR + "/combined.map", 'w') as f:
        pickle.dump(conturFactory.conturPoint, f)


if __name__ == "__main__":
    util.writeBanner()
    # Initialise a conturDepot
    contur = ct.conturDepot()
    # conturFactory should take entire yoda files/ list of yoda file as initialization argument but for now loop over aos in yodafile
    for infile in yodafiles:

        if not opts.BATCHMODE:
            # this is to get the plotting attributes down the line
            plotdirs = [os.path.abspath(os.path.dirname(f)) for f in infile]
            plotparser = util.mkStdPlotParser(plotdirs, )

        refhistos, mchistos, xsec, Nev = util.getHistos(infile)

        # again this looping belongs inside conturDepot

        for k, v in mchistos.iteritems():
            for k2, v2 in v.iteritems():

                # this is just used to check if a histo is a valid contur histo, this should be factored into histFact and taken out as a check here

                if tf.validHisto(v2.path):

                    #if "ATLAS_2014_I1279489" not in v2.path:
                    #    continue
                    # Currently histfact looks up the ref data every time, this should be factored into conturfact
                    # Conturfact should also hold xsec and Nev eventually

                    histo = ct.histFactory(v2, xsec, Nev)

                    # sometimes the list of conturPoints made by hist fact is empty (no signal in any bin), this exception should be properly handled inside histFact

                    # at this point, if we want to see the histogram, we need to write its .dat file.
                    if not opts.BATCHMODE:
                        util.writeHistoDat(infile, plotparser, opts.OUTPUTDIR, opts.NOSTACK, histo)

                    if histo.conturPoints:

                        # add the representative (i.e. highest cl bin from each histo) and push it into the factory
                        contur.addPoint(histo.conturPoints[histo.maxcl])


        # once we have every point from a given yoda, call the function to sort this
        # eventually conturFact should know which model point each yoda is from, then multiple yodas covering different pools can be pushed in at the same time
        # and eventually construct a point for each parameter space point, for now assume a single input yoda to test

        contur.sortPoints()
#
        if not opts.BATCHMODE:
            # write summary for plotting
            write_output(contur)
        else:
            print contur.conturPoint.CLs

